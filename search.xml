<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>选择排序</title>
      <link href="posts/43d00a99.html"/>
      <url>posts/43d00a99.html</url>
      
        <content type="html"><![CDATA[<center> 在这里bobo预祝大家新年快乐！！</center><h1><span id="python选择排序算法">Python选择排序算法</span></h1><h2><span id="一-选择排序算法的基本思想">一  . 选择排序算法的基本思想</span></h2><ol><li> 一趟排序记录最小的数，放到第一个位置。</li><li> 再一趟排序记录列表无序区最小的数，放到第二个位置，直至排序全部依次完成。</li></ol><h2><span id="二-算法关键点">二 . 算法关键点</span></h2><ol><li> 有序区和无序区。</li><li> 无序区最小数的位置。</li></ol><h2><span id="三-实现代码">三 . 实现代码</span></h2><p>​    首先看一种比较简单容易理解的选择排序算法思路：</p><p>​    </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">select_sort_simple</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    li_new <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        min_value <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>        li_new<span class="token punctuation">.</span>append<span class="token punctuation">(</span>min_value<span class="token punctuation">)</span>        li<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>min_value<span class="token punctuation">)</span>    <span class="token keyword">return</span> li_new<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="实现思路">实现思路：</span></h4><p>​    通过建立两个列表，使用列表的append方法和remove方法实现数据的排序。</p><h4><span id="代码弱点">代码弱点：</span></h4><p>​    <code>但是大家可以仔细想一下，这种算法需要开辟两块内存区域来存放列表，一块保存原数据，另一块保存排序后的数据，假如数据量基数比较大时，这无疑是致命。</code></p><p>​    比较难理解但是效率较高的选择排序算法思路：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mic_loc <span class="token operator">=</span> i        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span><span class="token punctuation">:</span>                min_loc <span class="token operator">=</span> j            li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="实现思路">实现思路：</span></h4><p>​    通过建立单个列表，然后利用列表的下标来替换相对应位置的元素。</p><h4><span id="代码讲解">代码讲解：</span></h4><ol><li> 第一层for循环决定选择排序算法的趟数。因为只剩最后一个数时，列表则不需要再次进行排序，所以len(li) - 1。</li><li> min_loc是一个标志位，最小值的下标。默认是无序区的第一个数。</li><li>第二层for循环是无序区相邻两个数进行比较，min_loc标志位保持为较小的数的下标。</li><li>无序区最小值移动到无序区的第一个，此轮循环结束，无序区的个数减一，有序区的个数加一。</li></ol><h4><span id="代码优点">代码优点：</span></h4><p>​    <code>select_sort选择排序算法，只使用了一块内存区域用于存储列表，减小内存的开销。</code></p><h2><span id="四-代码优化">四 . 代码优化：</span></h2><p>​    如果无序区的比较一趟之后，第一个数依然是最小的数，则不需要发生位置交换。优化后代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        min_loc <span class="token operator">=</span> i        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span><span class="token punctuation">:</span>                min_loc <span class="token operator">=</span> j        <span class="token keyword">if</span> min_loc <span class="token operator">!=</span> i<span class="token punctuation">:</span>            li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="五-运行测试">五 . 运行测试:</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"要排序的列表:{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span>select_sort<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"排序后的列表:{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 结果：</span><span class="token comment"># 要排序的列表:[3, 4, 2, 1, 5, 6, 8, 9]</span><span class="token comment"># 排序后的列表:[1, 2, 3, 4, 5, 6, 8, 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python选择排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 选择排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序算法</title>
      <link href="posts/4d081371.html"/>
      <url>posts/4d081371.html</url>
      
        <content type="html"><![CDATA[<h1><span id="python冒泡排序算法">Python冒泡排序算法</span></h1><h2><span id="一-冒泡排序算法的基本思想">一  . 冒泡排序算法的基本思想</span></h2><ol><li> 列表每两个相邻的数，如果前面的比后边的数大，则交换这两个数。</li><li>一趟排序完成之后，则无序区减少一个数，有序区增加一个数。（无序区是为完成排序的数，有序区是已经完成排序的数。）</li></ol><hr><h2><span id="二-代码关键点">二  . 代码关键点</span></h2><ol><li>趟数的概念</li><li>无序区的范围的变化</li></ol><hr><h2><span id="三-实现代码">三  . 实现代码</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码讲解：</p><ul><li>li是需要排序的列表。</li><li>第一层for循环一共需要遍历多少趟来回，因为最后只剩一个数时，不需要再遍历，则len(li) - 1。</li><li>第二层for循环时一共需要多少趟相邻数据比较，例如：长度为五的列表（下标从零开始）第零趟无序区的数的个数为零，则需要执行四趟，因为第四个数是和第五个数进行比较，比较完成时，最大值已经出现，就不需要再比较。</li><li>列表交换数据。</li></ul><h2><span id="四-时间复杂度">四 . 时间复杂度</span></h2><p>​    因为两层for循环，所以时间复杂度是O(n<sup>2</sup>)</p><h2><span id="五-性能优化">五 . 性能优化</span></h2><p>​    如果冒泡排序中的一趟排序没有发生交换，则说明列表已经有序，则可以直接结束算法。</p><h3><span id="解决思路">解决思路：</span></h3><p>​    可以通过使用标志位解决。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 最后一次只剩一个数时不用排序</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 第i趟</span>        exchange <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>li<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                exchange <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> exchange<span class="token punctuation">:</span>            <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="六-运行测试">六 . 运行测试:</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"要排序的列表:{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span>bubble_sort<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"排序后的列表:{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 结果：</span><span class="token comment"># 要排序的列表:[3, 4, 2, 1, 5, 6, 8, 9]</span><span class="token comment"># 排序后的列表:[1, 2, 3, 4, 5, 6, 8, 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python冒泡排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 冒泡排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存的穿透、击穿、雪崩</title>
      <link href="posts/56739dcf.html"/>
      <url>posts/56739dcf.html</url>
      
        <content type="html"><![CDATA[<h2><span id="一-缓存处理的过程">一 .  缓存处理的过程</span></h2><p>​    <code>前台请求，后台先从缓存中取数据，取到直接返回结果，取不到时从数据库中取，数据库取到更新缓存，并返回结果，数据库也没取到，那直接返回空结果。</code></p><hr><h2><span id="二-缓存穿透"><strong>二 . 缓存穿透</strong></span></h2><p>​    <strong>描述:</strong></p><p>​    <code>指查询一个一定不存在的数据，由于缓存是不命中时需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，进而给数据库带来压力。因为缓存和数据库中都没有的数据，但是用户不断发起请求，如发起为id为“-1”的数据或id为特别大不存在的数据。这时的用户很可能是攻击者，攻击会导致数据库压力过大。</code></p><p>​    <strong>解决方案：</strong></p><ol><li>接口层增加校验，如用户鉴权校验，id做基础校验，id&lt;=0的直接拦截。</li><li>从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击</li></ol><hr><h2><span id="三-缓存击穿">三 . 缓存击穿</span></h2><p>​    <strong>解决方案:</strong></p><ol><li>设置热点数据永远不过期。</li><li>加互斥锁。</li></ol><hr><h2><span id="四-缓存雪崩">四 . 缓存雪崩</span></h2><p>​    <strong>描述:</strong></p><p>​    <code>指缓存中数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至宕机。</code></p><p>​    <strong>与缓存击穿的区别：</strong></p><p>​    <code>缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。</code></p><p>​    <strong>解决方案：</strong></p><ol><li><p>缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。</p></li><li><p>如果缓存数据库是分布式部署，将热点数据均匀分布在不同搞得缓存数据库中。</p></li><li><p>设置热点数据永远不过期。</p><p>​</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 缓存问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 缓存雪崩 </tag>
            
            <tag> 缓存穿透 </tag>
            
            <tag> 缓存击穿 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
